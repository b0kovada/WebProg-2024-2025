import { describe, it, expect, beforeEach, vi } from 'vitest';
import { mount } from '@vue/test-utils';
import BookingList from '../components/BookingList.vue';
import BookingForm from '../components/BookingForm.vue';
import axios from 'axios';

vi.mock('axios');

describe('BookingList.vue', () => {
  it('fetches available slots and displays them', async () => {
    axios.get.mockResolvedValue({ data: [{ date: 'Hétfő', time: '10:00' }] });
    
    const wrapper = mount(BookingList);
    await new Promise(resolve => setTimeout(resolve, 100));
    
    expect(wrapper.text()).toContain('Hétfő');
    expect(wrapper.text()).toContain('10:00');
  });
});

describe('BookingForm.vue', () => {
  let wrapper;
  
  beforeEach(() => {
    wrapper = mount(BookingForm, {
      props: { id: 1 }
    });
  });
  
  it('validates form input before submission', async () => {
    await wrapper.find('button').trigger('click');
    expect(wrapper.text()).toContain('Időpont nem található!');
  });
  
  it('submits the booking and shows success toast', async () => {
    axios.post.mockResolvedValue({});
    
    wrapper.setData({
      name: 'Teszt Elek',
      phone: '123456789',
      slot: { date: 'Hétfő', time: '10:00' }
    });
    
    await wrapper.find('button').trigger('click');
    expect(axios.post).toHaveBeenCalled();
  });
});
