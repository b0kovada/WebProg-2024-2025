import { describe, it, expect, vi } from 'vitest';
import { mount } from '@vue/test-utils';
import BookingList from '../components/BookingList.vue';
import BookingForm from '../components/BookingForm.vue';
import axios from 'axios';

vi.mock('axios');

describe('BookingList.vue', () => {
  it('fetches and displays available slots', async () => {
    axios.get.mockResolvedValue({ data: [{ date: 'Hétfő', time: '10:00' }] });
    const wrapper = mount(BookingList);
    await new Promise(resolve => setTimeout(resolve, 50));
    expect(wrapper.text()).toContain('Hétfő');
    expect(wrapper.text()).toContain('10:00');
  });
});

describe('BookingForm.vue', () => {
  it('renders correctly', () => {
    const wrapper = mount(BookingForm);
    expect(wrapper.exists()).toBe(true);
  });

  it('requires name and phone before submitting', async () => {
    const wrapper = mount(BookingForm);
    await wrapper.find('button').trigger('click');
    expect(wrapper.text()).toContain('Foglalás'); // Nem történik foglalás
  });

  it('submits booking when all fields are filled', async () => {
    axios.post.mockResolvedValue({});
    const wrapper = mount(BookingForm);
    wrapper.find('input[type="text"]').setValue('Teszt Elek');
    wrapper.find('input[type="tel"]').setValue('123456789');
    await wrapper.find('button').trigger('click');
    expect(axios.post).toHaveBeenCalled();
  });
});
